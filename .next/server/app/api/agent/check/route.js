"use strict";(()=>{var e={};e.id=248,e.ids=[248],e.modules={1708:e=>{e.exports=require("node:process")},3295:e=>{e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4573:e=>{e.exports=require("node:buffer")},6111:(e,t,r)=>{r.d(t,{a:()=>d,z:()=>c});var a=r(70132),o=r(11572),i=r(94112);function s(e,t){return e?new Date(e):t?new Date(t):new Date}async function n(e){let t=new(await Promise.resolve().then(r.bind(r,40276))).OpenAI({apiKey:process.env.OPENAI_API_KEY});return(await t.embeddings.create({model:"text-embedding-ada-002",input:e})).data[0].embedding}async function c(e,t,r){try{if(console.log(`Processing calendar update for user ${e}, resource ${t}, state ${r}`),!await a.z.account.findFirst({where:{userId:e,provider:"google"}}))throw Error(`No Google account found for user ${e}`);let i=await (0,o.Im)(e);if("not_exists"===r)return void await l(e,t);let s=await i.events.get({calendarId:"primary",eventId:t});if(!s.data)return void console.log(`No event data found for ${t}`);s.data&&s.data.id&&await d(e,{id:s.data.id,summary:s.data.summary||"",description:s.data.description||"",location:s.data.location||"",start:s.data.start?{dateTime:s.data.start.dateTime||void 0,date:s.data.start.date||void 0}:void 0,end:s.data.end?{dateTime:s.data.end.dateTime||void 0,date:s.data.end.date||void 0}:void 0,attendees:s.data.attendees?.map(e=>({email:e.email||void 0}))||[]}),s.data&&s.data.id&&await p(e,{id:s.data.id,summary:s.data.summary||"",description:s.data.description||"",location:s.data.location||"",start:s.data.start?{dateTime:s.data.start.dateTime||void 0,date:s.data.start.date||void 0}:void 0,end:s.data.end?{dateTime:s.data.end.dateTime||void 0,date:s.data.end.date||void 0}:void 0,attendees:s.data.attendees?.map(e=>({email:e.email||void 0}))||[]})}catch(e){throw console.error("Error processing calendar update:",e),e}}async function d(e,t){try{let{id:r,summary:o="",description:i="",location:c="",start:d,end:l,attendees:p=[]}=t,u=p?.map(e=>e.email||"").filter(Boolean)||[],h=`${o} ${i} ${c} ${u.join(" ")}`,g=await n(h),m=s(d?.dateTime,d?.date),w=s(l?.dateTime,l?.date),f=await a.z.calendarEvent.findFirst({where:{userId:e,eventId:r}});if(f)await a.z.calendarEvent.update({where:{id:f.id},data:{title:o,description:i||"",location:c,startTime:m,endTime:w,attendees:u,embedding:g}}),console.log(`Updated calendar event: ${f.id}`);else{let t=await a.z.calendarEvent.create({data:{userId:e,eventId:r,title:o,description:i||"",location:c,startTime:m,endTime:w,attendees:u,embedding:g}});console.log(`Created calendar event: ${t.id}`)}}catch(e){throw console.error("Error processing calendar event:",e),e}}async function l(e,t){try{await a.z.calendarEvent.deleteMany({where:{userId:e,eventId:t}}),console.log(`Deleted calendar event: ${t}`)}catch(e){throw console.error(`Error handling deleted event ${t}:`,e),e}}async function p(e,t){let r=await a.z.instruction.findMany({where:{userId:e,active:!0,instruction:{contains:"calendar"}}});if(0===r.length)return;let{id:o,summary:s="",description:n="",location:c="",start:d,end:l,attendees:p=[]}=t;for(let t of r)try{let r=`
        I have a calendar event:
        Title: ${s}
        Description: ${n}
        Location: ${c}
        Start: ${d?.dateTime||d?.date||"Not specified"}
        End: ${l?.dateTime||l?.date||"Not specified"}
        Attendees: ${p?.map(e=>e.email||"").filter(Boolean).join(", ")||"None"}
        
        I have the following instruction: "${t.instruction}"
        
        Should I take any action based on this calendar event and instruction? If yes, what action should I take?
      `,u=await (0,i.E)(e,r,[]);u.toLowerCase().includes("yes")&&!u.toLowerCase().includes("no action")&&await a.z.task.create({data:{userId:e,title:`Process calendar event: ${s}`,description:u,type:"EMAIL",status:"PENDING",metadata:{eventId:o,instructionId:t.id}}})}catch(e){console.error(`Error processing instruction for event ${o}:`,e)}}},7852:(e,t,r)=>{r.r(t),r.d(t,{patchFetch:()=>x,routeModule:()=>I,serverHooks:()=>S,workAsyncStorage:()=>T,workUnitAsyncStorage:()=>E});var a={};r.r(a),r.d(a,{POST:()=>m});var o=r(96559),i=r(48088),s=r(37719),n=r(32190),c=r(35426),d=r(70809),l=r(70132),p=r(11572),u=r(6075),h=r(6111),g=r(75992);async function m(e){try{let t=await (0,c.getServerSession)(d.N);if(!t?.user)return n.NextResponse.json({success:!1,error:"Unauthorized"},{status:401});let r=(await e.json()).userId||t.user.id;if(!await l.z.user.findUnique({where:{id:r}}))return n.NextResponse.json({success:!1,error:"User not found"},{status:404});return w(r),n.NextResponse.json({success:!0,message:"Data check initiated",timestamp:new Date().toISOString()})}catch(e){return console.error("Error triggering data check:",e),n.NextResponse.json({success:!1,error:"Failed to trigger data check"},{status:500})}}async function w(e){try{console.log(`Manually checking data for user ${e}...`),await f(e),await v(e),console.log(`Finished checking data for user ${e}`)}catch(t){console.error(`Error checking data for user ${e}:`,t)}}async function f(e){try{let t=await (0,p.Im)(e);if(!t)return;let r=new Date,a=new Date(r.getTime()-864e5),o=(await t.events.list({calendarId:"primary",timeMin:a.toISOString(),timeMax:r.toISOString(),singleEvents:!0,orderBy:"updated"})).data.items||[];for(let t of o)t.id&&await (0,h.a)(e,{id:t.id,summary:t.summary||"",description:t.description||"",location:t.location||"",start:t.start?{dateTime:t.start.dateTime||void 0,date:t.start.date||void 0}:void 0,end:t.end?{dateTime:t.end.dateTime||void 0,date:t.end.date||void 0}:void 0,attendees:t.attendees?.map(e=>({email:e.email||void 0}))||[]});console.log(`Processed ${o.length} calendar events for user ${e}`)}catch(t){console.error(`Error checking calendar events for user ${e}:`,t)}}async function v(e){try{let t=await (0,u.pC)(e);if(!t)return;let r=new Date,a=new Date(r.getTime()-864e5);await y(e,t,a),await b(e,t,a),await $(e,t,a),console.log(`Finished checking HubSpot events for user ${e}`)}catch(t){console.error(`Error checking HubSpot events for user ${e}:`,t)}}async function y(e,t,r){try{let a=(await t.crm.contacts.basicApi.getPage(void 0,void 0,100,void 0,`createdate >= ${r.getTime()} OR lastmodifieddate >= ${r.getTime()}`)).body.results||[];for(let t of a){let r={objectId:t.id,objectType:"contact",eventType:"contact.creation",properties:t.properties};await (0,g.l)(e,r)}console.log(`Processed ${a.length} HubSpot contacts for user ${e}`)}catch(t){console.error(`Error checking HubSpot contacts for user ${e}:`,t)}}async function b(e,t,r){try{let a=(await t.crm.objects.notes.basicApi.getPage(void 0,void 0,100,void 0,`hs_createdate >= ${r.getTime()} OR hs_lastmodifieddate >= ${r.getTime()}`)).body.results||[];for(let t of a){let r={objectId:t.id,objectType:"note",eventType:"note.creation",properties:t.properties};await (0,g.l)(e,r)}console.log(`Processed ${a.length} HubSpot notes for user ${e}`)}catch(t){console.error(`Error checking HubSpot notes for user ${e}:`,t)}}async function $(e,t,r){try{let a=(await t.crm.deals.basicApi.getPage(void 0,void 0,100,void 0,`createdate >= ${r.getTime()} OR hs_lastmodifieddate >= ${r.getTime()}`)).body.results||[];for(let t of a){let r={objectId:t.id,objectType:"deal",eventType:"deal.creation",properties:t.properties};await (0,g.l)(e,r)}console.log(`Processed ${a.length} HubSpot deals for user ${e}`)}catch(t){console.error(`Error checking HubSpot deals for user ${e}:`,t)}}let I=new o.AppRouteRouteModule({definition:{kind:i.RouteKind.APP_ROUTE,page:"/api/agent/check/route",pathname:"/api/agent/check",filename:"route",bundlePath:"app/api/agent/check/route"},resolvedPagePath:"C:\\Users\\Joseph\\Documents\\Jump\\jump-advisor\\src\\app\\api\\agent\\check\\route.ts",nextConfigOutput:"",userland:a}),{workAsyncStorage:T,workUnitAsyncStorage:E,serverHooks:S}=I;function x(){return(0,s.patchFetch)({workAsyncStorage:T,workUnitAsyncStorage:E})}},10846:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},11723:e=>{e.exports=require("querystring")},12412:e=>{e.exports=require("assert")},16141:e=>{e.exports=require("node:zlib")},19771:e=>{e.exports=require("process")},21820:e=>{e.exports=require("os")},27910:e=>{e.exports=require("stream")},28354:e=>{e.exports=require("util")},29021:e=>{e.exports=require("fs")},29294:e=>{e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},33873:e=>{e.exports=require("path")},34631:e=>{e.exports=require("tls")},37067:e=>{e.exports=require("node:http")},37830:e=>{e.exports=require("node:stream/web")},44708:e=>{e.exports=require("node:https")},44870:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{e.exports=require("crypto")},55591:e=>{e.exports=require("https")},57075:e=>{e.exports=require("node:stream")},57975:e=>{e.exports=require("node:util")},63033:e=>{e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},70809:(e,t,r)=>{r.d(t,{N:()=>n});var a=r(16467),o=r(70132),i=r(36344);function s(e){let t=process.env[e];if(!t)throw Error(`Missing required env var: ${e}`);return t}console.log("NEXTAUTH_URL:",process.env.NEXTAUTH_URL),console.log("GOOGLE_CLIENT_ID:",process.env.GOOGLE_CLIENT_ID?"[Set]":"[Not Set]"),console.log("GOOGLE_CLIENT_SECRET:",process.env.GOOGLE_CLIENT_SECRET?"[Set]":"[Not Set]");let n={adapter:(0,a.y)(o.z),providers:[(0,i.A)({clientId:s("GOOGLE_CLIENT_ID"),clientSecret:s("GOOGLE_CLIENT_SECRET"),allowDangerousEmailAccountLinking:!0,authorization:{params:{scope:"openid email profile https://www.googleapis.com/auth/gmail.readonly https://www.googleapis.com/auth/calendar.readonly",prompt:"consent",access_type:"offline"}}}),function(e){return{id:"hubspot",name:"HubSpot",type:"oauth",allowDangerousEmailAccountLinking:!0,authorization:{url:"https://app.hubspot.com/oauth/authorize",params:{client_id:e.clientId,scope:"crm.schemas.contacts.read oauth",redirect_uri:e.callbackUrl}},token:{url:"https://api.hubapi.com/oauth/v1/token",async request({params:t,provider:r}){let a=await fetch(r.token?.url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({grant_type:"authorization_code",client_id:e.clientId,client_secret:e.clientSecret,redirect_uri:e.callbackUrl,code:t.code})});return{tokens:await a.json()}}},userinfo:{url:"https://api.hubapi.com/oauth/v1/access-tokens/",async request({tokens:e}){return(await fetch(`${this.url}/${e.access_token}`,{headers:{Authorization:`Bearer ${e.access_token}`}})).json()}},profile(e){if(console.log("HubSpot profile data:",JSON.stringify(e,null,2)),!e.email)throw Error("HubSpot profile is missing email field");return{id:e.user_id||e.id||"hubspot-user",email:e.email,name:e.name||`${e.firstName||""} ${e.lastName||""}`.trim()||e.email.split("@")[0],image:null}}}}({clientId:s("HUBSPOT_CLIENT_ID"),clientSecret:s("HUBSPOT_CLIENT_SECRET"),callbackUrl:process.env.NEXTAUTH_URL?`${process.env.NEXTAUTH_URL}/api/auth/callback/hubspot`:"http://localhost:3000/api/auth/callback/hubspot"})],callbacks:{session:async({session:e,token:t})=>(e.user&&t.sub&&(e.user.id=t.sub),e),signIn:async({account:e})=>(e&&"google"===e.provider&&e.refresh_token_expires_in&&delete e.refresh_token_expires_in,!0),redirect:async({url:e,baseUrl:t})=>e.startsWith(t)?e.includes("callbackUrl")?e:`${t}/dashboard`:e.startsWith("/")?`${t}/dashboard`:t},pages:{signIn:"/login",error:"/login"},session:{strategy:"jwt"}}},73024:e=>{e.exports=require("node:fs")},73136:e=>{e.exports=require("node:url")},73496:e=>{e.exports=require("http2")},73566:e=>{e.exports=require("worker_threads")},74075:e=>{e.exports=require("zlib")},75992:(e,t,r)=>{r.d(t,{l:()=>n});var a=r(70132),o=r(6075),i=r(98504),s=r(94112);async function n(e,t){try{if(console.log(`Processing HubSpot event for user ${e}`,t),!await a.z.account.findFirst({where:{userId:e,provider:"hubspot"}}))throw Error(`No HubSpot account found for user ${e}`);let r=await (0,o.pC)(e),i=t.subscriptionType;switch(i){case"contact.creation":case"contact.propertyChange":await c(e,r,t);break;case"note.creation":await d(e,r,t);break;case"deal.creation":case"deal.propertyChange":await l(e,r,t);break;default:console.log(`Unhandled HubSpot event type: ${i}`)}await p(e,t)}catch(e){throw console.error("Error processing HubSpot event:",e),e}}async function c(e,t,r){try{let o=r.objectId,s=(await t.crm.contacts.basicApi.getById(o,["email","firstname","lastname","phone","company","website","address","city","state","zip"])).body,n=s.properties.email,c=s.properties.firstname,d=s.properties.lastname,l=`${c} ${d} ${n} ${JSON.stringify(s.properties)}`,p=await (0,i.Lu)(l),u=await a.z.hubspotContact.findFirst({where:{userId:e,hubspotId:String(o)}});if(u)await a.z.hubspotContact.update({where:{id:u.id},data:{email:n,firstName:c,lastName:d,properties:s.properties,embedding:p}}),console.log(`Updated HubSpot contact: ${u.id}`);else{let t=await a.z.hubspotContact.create({data:{userId:e,hubspotId:String(o),email:n,firstName:c,lastName:d,properties:s.properties,embedding:p}});console.log(`Created HubSpot contact: ${t.id}`)}}catch(e){throw console.error("Error processing HubSpot contact event:",e),e}}async function d(e,t,r){try{let e=r.objectId,o=(await t.crm.objects.notes.basicApi.getById(e)).body,s=await t.crm.objects.notes.associationsApi.getAll(e,"contact");if(!s.body.results||0===s.body.results.length)return void console.log(`Note ${e} has no associated contact`);let n=s.body.results[0].id,c=o.properties.hs_note_body||"",d=await (0,i.Lu)(c),l=await a.z.hubspotNote.findUnique({where:{hubspotId:String(e)}});if(l)await a.z.hubspotNote.update({where:{id:l.id},data:{content:c,embedding:d}}),console.log(`Updated HubSpot note: ${l.id}`);else{let t=await a.z.hubspotNote.create({data:{hubspotId:String(e),contactId:String(n),content:c,createdAt:new Date(o.properties.hs_createdate||Date.now()),embedding:d}});console.log(`Created HubSpot note: ${t.id}`)}}catch(e){throw console.error("Error processing HubSpot note event:",e),e}}async function l(e,t,r){try{let e=r.objectId,a=(await t.crm.deals.basicApi.getById(e)).body;console.log(`Received deal update: ${e}`,a.properties)}catch(e){throw console.error("Error processing HubSpot deal event:",e),e}}async function p(e,t){let r=(await a.z.instruction.findMany({where:{userId:e,active:!0}})).filter(e=>e.instruction.toLowerCase().includes("hubspot"));if(0!==r.length)for(let o of r)try{let r=`
        I have a HubSpot event:
        Type: ${t.subscriptionType}
        Object ID: ${t.objectId}
        Event ID: ${t.eventId}
        
        I have the following instruction: "${o.instruction}"
        
        Should I take any action based on this HubSpot event and instruction? If yes, what action should I take?
      `,i=await (0,s.E)(e,r,[]);i.toLowerCase().includes("yes")&&!i.toLowerCase().includes("no action")&&await a.z.task.create({data:{userId:e,title:`Process HubSpot event: ${t.subscriptionType}`,description:i,type:"HUBSPOT",status:"PENDING",metadata:{objectId:t.objectId,eventType:t.subscriptionType,instructionId:o.id}}})}catch(e){console.error("Error processing instruction for HubSpot event:",e)}}},76760:e=>{e.exports=require("node:path")},77030:e=>{e.exports=require("node:net")},79428:e=>{e.exports=require("buffer")},79551:e=>{e.exports=require("url")},79646:e=>{e.exports=require("child_process")},81630:e=>{e.exports=require("http")},83997:e=>{e.exports=require("tty")},91645:e=>{e.exports=require("net")},94735:e=>{e.exports=require("events")},96330:e=>{e.exports=require("@prisma/client")}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[243,580,973,582,957,112],()=>r(7852));module.exports=a})();