generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accounts            Account[]
  instructions        Instruction[]
  sessions            Session[]
  tasks               Task[]
  webhookSubscriptions WebhookSubscription[]
  syncStates          SyncState[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  type        TaskType
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?
  resumeAfter DateTime?  @map("resume_after")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps       TaskStep[]
}

model TaskStep {
  id        String     @id @default(cuid())
  taskId    String
  status    TaskStatus @default(PENDING)
  metadata  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  task      Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model Instruction {
  id          String   @id @default(cuid())
  userId      String
  instruction String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailDocument {
  id         String   @id @default(cuid())
  emailId    String   @unique
  messageId  String?  @unique
  userId     String
  subject    String
  content    String
  sender     String
  recipients String[]
  sentAt     DateTime
  processed  Boolean  @default(false)
  embedding  Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  syncState  SyncState? @relation(fields: [syncStateId], references: [id])
  syncStateId String?
}

model HubspotContact {
  id         String        @id @default(cuid())
  hubspotId  String        @unique
  userId     String
  email      String?
  firstName  String?
  lastName   String?
  properties Json?
  embedding  Json
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  notes      HubspotNote[]
}

model HubspotNote {
  id        String         @id @default(cuid())
  hubspotId String         @unique
  contactId String
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  embedding Json
  contact   HubspotContact @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model CalendarEvent {
  id          String   @id @default(cuid())
  eventId     String   @unique
  userId      String
  title       String
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime
  attendees   String[]
  embedding   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  role      String
  content   String
  createdAt DateTime @default(now())
}

model IngestionStatus {
  id        String              @id @default(cuid())
  userId    String
  type      IngestionType
  status    IngestionStatusType @default(PENDING)
  progress  Int                 @default(0)
  total     Int                 @default(0)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model SyncState {
  id           String         @id @default(cuid())
  userId       String
  service      String
  lastSyncTime DateTime?
  status       String        @default("IDLE")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  emailDocs    EmailDocument[]

  @@unique([userId, service], name: "sync_state_user_service")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  WAITING_FOR_RESPONSE
}

enum TaskType {
  EMAIL
  CALENDAR
  HUBSPOT
  GENERAL
  CONTACT_DISAMBIGUATION
}

enum IngestionType {
  EMAIL
  CALENDAR
  HUBSPOT
  ALL
}

enum IngestionStatusType {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model WebhookSubscription {
  id         String   @id @default(cuid())
  userId     String
  service    String
  externalId String   @unique
  channelId  String?
  expiresAt  DateTime?
  active     Boolean  @default(true)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([service])
}
